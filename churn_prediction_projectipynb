{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9e956e1f-6cc3-41d4-bb40-e30428326299",
   "metadata": {},
   "source": [
    "# Prediction Model Project\n",
    "## This project creates different prediction models for a technology company in order to better estimate the likelyhood of retaining clients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c28b88c-303a-4656-ac10-80a9a40a3097",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "import sklearn.metrics as metrics\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
    "from IPython.display import SVG\n",
    "from graphviz import Source\n",
    "from IPython.display import display\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fe58a78e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>...</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7038</th>\n",
       "      <td>6840-RESVB</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>24</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>84.80</td>\n",
       "      <td>1990.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7039</th>\n",
       "      <td>2234-XADUH</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>72</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>103.20</td>\n",
       "      <td>7362.9</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7040</th>\n",
       "      <td>4801-JZAZL</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>11</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.60</td>\n",
       "      <td>346.45</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7041</th>\n",
       "      <td>8361-LTMKD</td>\n",
       "      <td>Male</td>\n",
       "      <td>1</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>74.40</td>\n",
       "      <td>306.6</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7042</th>\n",
       "      <td>3186-AJIEK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>66</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>105.65</td>\n",
       "      <td>6844.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7043 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID  gender  SeniorCitizen Partner Dependents  tenure  \\\n",
       "0     7590-VHVEG  Female              0     Yes         No       1   \n",
       "1     5575-GNVDE    Male              0      No         No      34   \n",
       "2     3668-QPYBK    Male              0      No         No       2   \n",
       "3     7795-CFOCW    Male              0      No         No      45   \n",
       "4     9237-HQITU  Female              0      No         No       2   \n",
       "...          ...     ...            ...     ...        ...     ...   \n",
       "7038  6840-RESVB    Male              0     Yes        Yes      24   \n",
       "7039  2234-XADUH  Female              0     Yes        Yes      72   \n",
       "7040  4801-JZAZL  Female              0     Yes        Yes      11   \n",
       "7041  8361-LTMKD    Male              1     Yes         No       4   \n",
       "7042  3186-AJIEK    Male              0      No         No      66   \n",
       "\n",
       "     PhoneService     MultipleLines InternetService OnlineSecurity  ...  \\\n",
       "0              No  No phone service             DSL             No  ...   \n",
       "1             Yes                No             DSL            Yes  ...   \n",
       "2             Yes                No             DSL            Yes  ...   \n",
       "3              No  No phone service             DSL            Yes  ...   \n",
       "4             Yes                No     Fiber optic             No  ...   \n",
       "...           ...               ...             ...            ...  ...   \n",
       "7038          Yes               Yes             DSL            Yes  ...   \n",
       "7039          Yes               Yes     Fiber optic             No  ...   \n",
       "7040           No  No phone service             DSL            Yes  ...   \n",
       "7041          Yes               Yes     Fiber optic             No  ...   \n",
       "7042          Yes                No     Fiber optic            Yes  ...   \n",
       "\n",
       "     DeviceProtection TechSupport StreamingTV StreamingMovies        Contract  \\\n",
       "0                  No          No          No              No  Month-to-month   \n",
       "1                 Yes          No          No              No        One year   \n",
       "2                  No          No          No              No  Month-to-month   \n",
       "3                 Yes         Yes          No              No        One year   \n",
       "4                  No          No          No              No  Month-to-month   \n",
       "...               ...         ...         ...             ...             ...   \n",
       "7038              Yes         Yes         Yes             Yes        One year   \n",
       "7039              Yes          No         Yes             Yes        One year   \n",
       "7040               No          No          No              No  Month-to-month   \n",
       "7041               No          No          No              No  Month-to-month   \n",
       "7042              Yes         Yes         Yes             Yes        Two year   \n",
       "\n",
       "     PaperlessBilling              PaymentMethod MonthlyCharges  TotalCharges  \\\n",
       "0                 Yes           Electronic check          29.85         29.85   \n",
       "1                  No               Mailed check          56.95        1889.5   \n",
       "2                 Yes               Mailed check          53.85        108.15   \n",
       "3                  No  Bank transfer (automatic)          42.30       1840.75   \n",
       "4                 Yes           Electronic check          70.70        151.65   \n",
       "...               ...                        ...            ...           ...   \n",
       "7038              Yes               Mailed check          84.80        1990.5   \n",
       "7039              Yes    Credit card (automatic)         103.20        7362.9   \n",
       "7040              Yes           Electronic check          29.60        346.45   \n",
       "7041              Yes               Mailed check          74.40         306.6   \n",
       "7042              Yes  Bank transfer (automatic)         105.65        6844.5   \n",
       "\n",
       "     Churn  \n",
       "0       No  \n",
       "1       No  \n",
       "2      Yes  \n",
       "3       No  \n",
       "4      Yes  \n",
       "...    ...  \n",
       "7038    No  \n",
       "7039    No  \n",
       "7040    No  \n",
       "7041   Yes  \n",
       "7042    No  \n",
       "\n",
       "[7043 rows x 21 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn = pd.read_csv('churn.csv')\n",
    "\n",
    "churn.shape\n",
    "churn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "fcf33505-7df2-4778-923a-e4cd18790da1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID           object\n",
       "gender               object\n",
       "SeniorCitizen         int64\n",
       "Partner              object\n",
       "Dependents           object\n",
       "tenure                int64\n",
       "PhoneService         object\n",
       "MultipleLines        object\n",
       "InternetService      object\n",
       "OnlineSecurity       object\n",
       "OnlineBackup         object\n",
       "DeviceProtection     object\n",
       "TechSupport          object\n",
       "StreamingTV          object\n",
       "StreamingMovies      object\n",
       "Contract             object\n",
       "PaperlessBilling     object\n",
       "PaymentMethod        object\n",
       "MonthlyCharges      float64\n",
       "TotalCharges         object\n",
       "Churn                object\n",
       "dtype: object"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "34eee5d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transforms customerID in an useful column (1,2,...,7038, 7040)\n",
    "churn.customerID = churn.index + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "38651fb3-871b-489c-94ad-8ac89bbb41f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "churn = churn.replace(' ', np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "82fc309c-b144-4b4d-868b-306f107c87a1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID           0\n",
       "gender               0\n",
       "SeniorCitizen        0\n",
       "Partner              0\n",
       "Dependents           0\n",
       "tenure               0\n",
       "PhoneService         0\n",
       "MultipleLines        0\n",
       "InternetService      0\n",
       "OnlineSecurity       0\n",
       "OnlineBackup         0\n",
       "DeviceProtection     0\n",
       "TechSupport          0\n",
       "StreamingTV          0\n",
       "StreamingMovies      0\n",
       "Contract             0\n",
       "PaperlessBilling     0\n",
       "PaymentMethod        0\n",
       "MonthlyCharges       0\n",
       "TotalCharges        11\n",
       "Churn                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn.isna().sum()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "60d8416b",
   "metadata": {},
   "outputs": [],
   "source": [
    "churn['TotalCharges']=np.where(churn['TotalCharges'].isna(),churn['MonthlyCharges']*churn['tenure'],churn['TotalCharges'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c3487e9f-72bf-42b3-8c53-6c98f3a76c81",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID          0\n",
       "gender              0\n",
       "SeniorCitizen       0\n",
       "Partner             0\n",
       "Dependents          0\n",
       "tenure              0\n",
       "PhoneService        0\n",
       "MultipleLines       0\n",
       "InternetService     0\n",
       "OnlineSecurity      0\n",
       "OnlineBackup        0\n",
       "DeviceProtection    0\n",
       "TechSupport         0\n",
       "StreamingTV         0\n",
       "StreamingMovies     0\n",
       "Contract            0\n",
       "PaperlessBilling    0\n",
       "PaymentMethod       0\n",
       "MonthlyCharges      0\n",
       "TotalCharges        0\n",
       "Churn               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "2d9042f8-2e4d-45cf-9533-9a094238e3bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's visualize the distribution of clientes according to how many months they\n",
    "# have been a customer (tenure)\n",
    "_=sns.histplot(churn.tenure).set(title='Distribution of Clients by Tenure', xlabel='Tenure (months)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "fc57c983-e040-43ad-92a4-d05ee44aee40",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transforms the columns 'tenure' into categoric \n",
    "churn.tenure = churn.tenure.map(lambda x : 'old_customer' if x > 57 else 'regular_customer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9b6e076a-c1c3-434b-8d57-8251bd33f002",
   "metadata": {},
   "outputs": [],
   "source": [
    "churn = churn.rename(columns=str.lower) # Rename columns to lower letters\n",
    "churn.gender = (churn.gender=='Female').astype('int') # Label to numeric\n",
    "churn.partner = (churn.partner=='Yes').astype('int') # Label to numeric\n",
    "churn.dependents = (churn.dependents=='Yes').astype('int') # Label to numeric\n",
    "churn.phoneservice = (churn.phoneservice=='Yes').astype('int') # Label to numeric\n",
    "churn.paperlessbilling = (churn.paperlessbilling=='Yes').astype('int') # Label to numeric\n",
    "churn.totalcharges = churn.totalcharges.astype('float')\n",
    "churn.churn = (churn.churn=='Yes').astype('int') # Label to numeric\n",
    "churn['has_multiplelines'] = (churn.multiplelines=='Yes').astype('int') # Create new column \"has_multiplelines\"\n",
    "churn['has_onlinesecurity'] = (churn.onlinesecurity=='Yes').astype('int') # Create new column \"has_onlinesecurity\"\n",
    "churn['has_onlinebackup'] = (churn.onlinebackup=='Yes').astype('int') # Create new column \"has_onlinebackup\"\n",
    "churn['has_deviceprotection'] = (churn.deviceprotection=='Yes').astype('int') # Create new column \"has_deviceprotection\"\n",
    "churn['has_techsupport'] = (churn.techsupport=='Yes').astype('int') # Create new column \"has_techsupport\"\n",
    "churn['has_streamingtv'] = (churn.streamingtv=='Yes').astype('int') # Create new column \"has_streamingtv\"\n",
    "churn['has_streamingmovies'] = (churn.streamingmovies=='Yes').astype('int') # Create new column \"has_streamingmovies\"\n",
    "churn['has_monthlycontract'] = (churn.contract=='Month-to-month').astype('int') # Create new column \"has_monthlycontract\"\n",
    "churn['has_paymentmethod_electronic_check'] = (churn.paymentmethod=='electronic_check').astype('int') # Create new column \"has_paymentmethod_electronic_check\"\n",
    "churn = churn.drop(['contract', 'paymentmethod', 'has_deviceprotection', 'gender', 'phoneservice', 'streamingmovies', 'streamingtv', 'techsupport', 'deviceprotection', 'onlinebackup', 'onlinesecurity', 'multiplelines'], axis=1) # Drop some features which aren't informative\n",
    "churn = pd.get_dummies(churn) # Categorical values to 1-hot (\"one hot\" encoding is a representation of categorical variables as binary vectors)\n",
    "churn = churn.drop(['internetservice_No'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "065486db-81d4-4751-8f0c-76ae3ecf33f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let's convert all data to float\n",
    "churn = churn.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b1fa7487-5969-4ccf-a65a-476cf4055544",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerid                            float64\n",
       "seniorcitizen                         float64\n",
       "partner                               float64\n",
       "dependents                            float64\n",
       "paperlessbilling                      float64\n",
       "monthlycharges                        float64\n",
       "totalcharges                          float64\n",
       "churn                                 float64\n",
       "has_multiplelines                     float64\n",
       "has_onlinesecurity                    float64\n",
       "has_onlinebackup                      float64\n",
       "has_techsupport                       float64\n",
       "has_streamingtv                       float64\n",
       "has_streamingmovies                   float64\n",
       "has_monthlycontract                   float64\n",
       "has_paymentmethod_electronic_check    float64\n",
       "tenure_old_customer                   float64\n",
       "tenure_regular_customer               float64\n",
       "internetservice_DSL                   float64\n",
       "internetservice_Fiber optic           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check all values are indeed numeric (float)\n",
    "churn.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "123a0902-f602-4435-9afc-0823d78eace1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerid</th>\n",
       "      <th>seniorcitizen</th>\n",
       "      <th>partner</th>\n",
       "      <th>dependents</th>\n",
       "      <th>paperlessbilling</th>\n",
       "      <th>monthlycharges</th>\n",
       "      <th>totalcharges</th>\n",
       "      <th>churn</th>\n",
       "      <th>has_multiplelines</th>\n",
       "      <th>has_onlinesecurity</th>\n",
       "      <th>has_onlinebackup</th>\n",
       "      <th>has_techsupport</th>\n",
       "      <th>has_streamingtv</th>\n",
       "      <th>has_streamingmovies</th>\n",
       "      <th>has_monthlycontract</th>\n",
       "      <th>has_paymentmethod_electronic_check</th>\n",
       "      <th>tenure_old_customer</th>\n",
       "      <th>tenure_regular_customer</th>\n",
       "      <th>internetservice_DSL</th>\n",
       "      <th>internetservice_Fiber optic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7038</th>\n",
       "      <td>7039.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>84.80</td>\n",
       "      <td>1990.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7039</th>\n",
       "      <td>7040.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>103.20</td>\n",
       "      <td>7362.90</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7040</th>\n",
       "      <td>7041.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>29.60</td>\n",
       "      <td>346.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7041</th>\n",
       "      <td>7042.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>74.40</td>\n",
       "      <td>306.60</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7042</th>\n",
       "      <td>7043.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>105.65</td>\n",
       "      <td>6844.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7043 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerid  seniorcitizen  partner  dependents  paperlessbilling  \\\n",
       "0            1.0            0.0      1.0         0.0               1.0   \n",
       "1            2.0            0.0      0.0         0.0               0.0   \n",
       "2            3.0            0.0      0.0         0.0               1.0   \n",
       "3            4.0            0.0      0.0         0.0               0.0   \n",
       "4            5.0            0.0      0.0         0.0               1.0   \n",
       "...          ...            ...      ...         ...               ...   \n",
       "7038      7039.0            0.0      1.0         1.0               1.0   \n",
       "7039      7040.0            0.0      1.0         1.0               1.0   \n",
       "7040      7041.0            0.0      1.0         1.0               1.0   \n",
       "7041      7042.0            1.0      1.0         0.0               1.0   \n",
       "7042      7043.0            0.0      0.0         0.0               1.0   \n",
       "\n",
       "      monthlycharges  totalcharges  churn  has_multiplelines  \\\n",
       "0              29.85         29.85    0.0                0.0   \n",
       "1              56.95       1889.50    0.0                0.0   \n",
       "2              53.85        108.15    1.0                0.0   \n",
       "3              42.30       1840.75    0.0                0.0   \n",
       "4              70.70        151.65    1.0                0.0   \n",
       "...              ...           ...    ...                ...   \n",
       "7038           84.80       1990.50    0.0                1.0   \n",
       "7039          103.20       7362.90    0.0                1.0   \n",
       "7040           29.60        346.45    0.0                0.0   \n",
       "7041           74.40        306.60    1.0                1.0   \n",
       "7042          105.65       6844.50    0.0                0.0   \n",
       "\n",
       "      has_onlinesecurity  has_onlinebackup  has_techsupport  has_streamingtv  \\\n",
       "0                    0.0               1.0              0.0              0.0   \n",
       "1                    1.0               0.0              0.0              0.0   \n",
       "2                    1.0               1.0              0.0              0.0   \n",
       "3                    1.0               0.0              1.0              0.0   \n",
       "4                    0.0               0.0              0.0              0.0   \n",
       "...                  ...               ...              ...              ...   \n",
       "7038                 1.0               0.0              1.0              1.0   \n",
       "7039                 0.0               1.0              0.0              1.0   \n",
       "7040                 1.0               0.0              0.0              0.0   \n",
       "7041                 0.0               0.0              0.0              0.0   \n",
       "7042                 1.0               0.0              1.0              1.0   \n",
       "\n",
       "      has_streamingmovies  has_monthlycontract  \\\n",
       "0                     0.0                  1.0   \n",
       "1                     0.0                  0.0   \n",
       "2                     0.0                  1.0   \n",
       "3                     0.0                  0.0   \n",
       "4                     0.0                  1.0   \n",
       "...                   ...                  ...   \n",
       "7038                  1.0                  0.0   \n",
       "7039                  1.0                  0.0   \n",
       "7040                  0.0                  1.0   \n",
       "7041                  0.0                  1.0   \n",
       "7042                  1.0                  0.0   \n",
       "\n",
       "      has_paymentmethod_electronic_check  tenure_old_customer  \\\n",
       "0                                    0.0                  0.0   \n",
       "1                                    0.0                  0.0   \n",
       "2                                    0.0                  0.0   \n",
       "3                                    0.0                  0.0   \n",
       "4                                    0.0                  0.0   \n",
       "...                                  ...                  ...   \n",
       "7038                                 0.0                  0.0   \n",
       "7039                                 0.0                  1.0   \n",
       "7040                                 0.0                  0.0   \n",
       "7041                                 0.0                  0.0   \n",
       "7042                                 0.0                  1.0   \n",
       "\n",
       "      tenure_regular_customer  internetservice_DSL  \\\n",
       "0                         1.0                  1.0   \n",
       "1                         1.0                  1.0   \n",
       "2                         1.0                  1.0   \n",
       "3                         1.0                  1.0   \n",
       "4                         1.0                  0.0   \n",
       "...                       ...                  ...   \n",
       "7038                      1.0                  1.0   \n",
       "7039                      0.0                  0.0   \n",
       "7040                      1.0                  1.0   \n",
       "7041                      1.0                  0.0   \n",
       "7042                      0.0                  0.0   \n",
       "\n",
       "      internetservice_Fiber optic  \n",
       "0                             0.0  \n",
       "1                             0.0  \n",
       "2                             0.0  \n",
       "3                             0.0  \n",
       "4                             1.0  \n",
       "...                           ...  \n",
       "7038                          0.0  \n",
       "7039                          1.0  \n",
       "7040                          0.0  \n",
       "7041                          1.0  \n",
       "7042                          1.0  \n",
       "\n",
       "[7043 rows x 20 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "churn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ed9591d3-78c2-49dc-94b1-5fee620022d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = sns.histplot(churn.monthlycharges).set(title='Distribution of Monthly Charges values', xlabel='Monthly Charges ($)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d21173f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = sns.histplot(churn.totalcharges).set(title='Distribution of Total Charges values', xlabel='Total Charges ($)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "379fae00",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(churn, col=\"churn\")\n",
    "g.fig.suptitle('Distributions of Monthly Charges according to churn')\n",
    "_ = g.map_dataframe(sns.histplot, x=\"monthlycharges\").set(xlabel='Monthly Charges ($)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fa930782-824f-4fe8-b1c5-741ef6567fb4",
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = sns.FacetGrid(churn, col=\"churn\")\n",
    "g.fig.suptitle('Distributions of Total Charges according to churn')\n",
    "_ = g.map_dataframe(sns.histplot, x=\"totalcharges\").set(xlabel='Total Charges ($)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0d16ea39-d394-4837-9034-e7cc37fbd0d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = churn.corr()['churn'].drop('churn').plot(kind='barh').set(title=\"Correlation between the variable 'churn' and the rest of the variables\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "84475610-a35f-4859-9c07-1605e5bb88ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "train, test = train_test_split(churn, test_size=1400, random_state=15, shuffle=True)\n",
    "\n",
    "\n",
    "label = 'churn'\n",
    "cid = 'customerid' ### New\n",
    "\n",
    "x_train = train.drop(label, axis=1)\n",
    "x_train = x_train.drop(cid, axis=1) ### New\n",
    "y_train = train[label]\n",
    "cid_train = train[cid] ### New\n",
    "\n",
    "x_test = test.drop(label, axis=1)\n",
    "x_test = x_test.drop(cid, axis=1) ### New\n",
    "y_test = test[label]\n",
    "cid_test = test[cid] ### New"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7435fa41-051d-404e-a7dd-5693837de9b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerid</th>\n",
       "      <th>seniorcitizen</th>\n",
       "      <th>partner</th>\n",
       "      <th>dependents</th>\n",
       "      <th>paperlessbilling</th>\n",
       "      <th>monthlycharges</th>\n",
       "      <th>totalcharges</th>\n",
       "      <th>churn</th>\n",
       "      <th>has_multiplelines</th>\n",
       "      <th>has_onlinesecurity</th>\n",
       "      <th>has_onlinebackup</th>\n",
       "      <th>has_techsupport</th>\n",
       "      <th>has_streamingtv</th>\n",
       "      <th>has_streamingmovies</th>\n",
       "      <th>has_monthlycontract</th>\n",
       "      <th>has_paymentmethod_electronic_check</th>\n",
       "      <th>tenure_old_customer</th>\n",
       "      <th>tenure_regular_customer</th>\n",
       "      <th>internetservice_DSL</th>\n",
       "      <th>internetservice_Fiber optic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6034</th>\n",
       "      <td>6035.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.25</td>\n",
       "      <td>129.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5604</th>\n",
       "      <td>5605.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.80</td>\n",
       "      <td>1207.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4923</th>\n",
       "      <td>4924.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>49.75</td>\n",
       "      <td>2535.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3334</th>\n",
       "      <td>3335.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>106.30</td>\n",
       "      <td>4443.45</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4295</th>\n",
       "      <td>4296.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>60.95</td>\n",
       "      <td>4119.40</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2715</th>\n",
       "      <td>2716.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.25</td>\n",
       "      <td>996.45</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2204</th>\n",
       "      <td>2205.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111.30</td>\n",
       "      <td>7482.10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6528</th>\n",
       "      <td>6529.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.35</td>\n",
       "      <td>1458.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2693</th>\n",
       "      <td>2694.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.30</td>\n",
       "      <td>1414.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3829</th>\n",
       "      <td>3830.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>101.00</td>\n",
       "      <td>4388.40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5643 rows × 20 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerid  seniorcitizen  partner  dependents  paperlessbilling  \\\n",
       "6034      6035.0            0.0      0.0         0.0               0.0   \n",
       "5604      5605.0            0.0      0.0         0.0               1.0   \n",
       "4923      4924.0            0.0      0.0         0.0               1.0   \n",
       "3334      3335.0            0.0      0.0         0.0               1.0   \n",
       "4295      4296.0            1.0      1.0         0.0               1.0   \n",
       "...          ...            ...      ...         ...               ...   \n",
       "2715      2716.0            0.0      0.0         0.0               1.0   \n",
       "2204      2205.0            0.0      1.0         1.0               1.0   \n",
       "6528      6529.0            0.0      1.0         1.0               0.0   \n",
       "2693      2694.0            0.0      0.0         0.0               0.0   \n",
       "3829      3830.0            1.0      1.0         0.0               1.0   \n",
       "\n",
       "      monthlycharges  totalcharges  churn  has_multiplelines  \\\n",
       "6034           20.25        129.15    0.0                0.0   \n",
       "5604           70.80       1207.00    0.0                0.0   \n",
       "4923           49.75       2535.55    0.0                0.0   \n",
       "3334          106.30       4443.45    1.0                1.0   \n",
       "4295           60.95       4119.40    0.0                0.0   \n",
       "...              ...           ...    ...                ...   \n",
       "2715           25.25        996.45    0.0                1.0   \n",
       "2204          111.30       7482.10    1.0                1.0   \n",
       "6528           20.35       1458.10    0.0                0.0   \n",
       "2693           19.30       1414.80    0.0                0.0   \n",
       "3829          101.00       4388.40    1.0                1.0   \n",
       "\n",
       "      has_onlinesecurity  has_onlinebackup  has_techsupport  has_streamingtv  \\\n",
       "6034                 0.0               0.0              0.0              0.0   \n",
       "5604                 0.0               0.0              0.0              0.0   \n",
       "4923                 1.0               0.0              0.0              0.0   \n",
       "3334                 0.0               1.0              0.0              1.0   \n",
       "4295                 1.0               1.0              1.0              0.0   \n",
       "...                  ...               ...              ...              ...   \n",
       "2715                 0.0               0.0              0.0              0.0   \n",
       "2204                 1.0               1.0              0.0              1.0   \n",
       "6528                 0.0               0.0              0.0              0.0   \n",
       "2693                 0.0               0.0              0.0              0.0   \n",
       "3829                 0.0               1.0              0.0              1.0   \n",
       "\n",
       "      has_streamingmovies  has_monthlycontract  \\\n",
       "6034                  0.0                  0.0   \n",
       "5604                  0.0                  1.0   \n",
       "4923                  0.0                  1.0   \n",
       "3334                  1.0                  1.0   \n",
       "4295                  0.0                  0.0   \n",
       "...                   ...                  ...   \n",
       "2715                  0.0                  1.0   \n",
       "2204                  1.0                  0.0   \n",
       "6528                  0.0                  0.0   \n",
       "2693                  0.0                  0.0   \n",
       "3829                  1.0                  1.0   \n",
       "\n",
       "      has_paymentmethod_electronic_check  tenure_old_customer  \\\n",
       "6034                                 0.0                  0.0   \n",
       "5604                                 0.0                  0.0   \n",
       "4923                                 0.0                  0.0   \n",
       "3334                                 0.0                  0.0   \n",
       "4295                                 0.0                  1.0   \n",
       "...                                  ...                  ...   \n",
       "2715                                 0.0                  0.0   \n",
       "2204                                 0.0                  1.0   \n",
       "6528                                 0.0                  1.0   \n",
       "2693                                 0.0                  1.0   \n",
       "3829                                 0.0                  0.0   \n",
       "\n",
       "      tenure_regular_customer  internetservice_DSL  \\\n",
       "6034                      1.0                  0.0   \n",
       "5604                      1.0                  0.0   \n",
       "4923                      1.0                  1.0   \n",
       "3334                      1.0                  0.0   \n",
       "4295                      0.0                  1.0   \n",
       "...                       ...                  ...   \n",
       "2715                      1.0                  0.0   \n",
       "2204                      0.0                  0.0   \n",
       "6528                      0.0                  0.0   \n",
       "2693                      0.0                  0.0   \n",
       "3829                      1.0                  0.0   \n",
       "\n",
       "      internetservice_Fiber optic  \n",
       "6034                          0.0  \n",
       "5604                          1.0  \n",
       "4923                          0.0  \n",
       "3334                          1.0  \n",
       "4295                          0.0  \n",
       "...                           ...  \n",
       "2715                          0.0  \n",
       "2204                          1.0  \n",
       "6528                          0.0  \n",
       "2693                          0.0  \n",
       "3829                          1.0  \n",
       "\n",
       "[5643 rows x 20 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "8c70e445-88cf-4fef-b8a6-18eb5c66c361",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "seniorcitizen                         float64\n",
       "partner                               float64\n",
       "dependents                            float64\n",
       "paperlessbilling                      float64\n",
       "monthlycharges                        float64\n",
       "totalcharges                          float64\n",
       "has_multiplelines                     float64\n",
       "has_onlinesecurity                    float64\n",
       "has_onlinebackup                      float64\n",
       "has_techsupport                       float64\n",
       "has_streamingtv                       float64\n",
       "has_streamingmovies                   float64\n",
       "has_monthlycontract                   float64\n",
       "has_paymentmethod_electronic_check    float64\n",
       "tenure_old_customer                   float64\n",
       "tenure_regular_customer               float64\n",
       "internetservice_DSL                   float64\n",
       "internetservice_Fiber optic           float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "70cee3f9-7ffe-4270-9328-bb947b9e3db4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((5643, 18), (5643,), (5643,), (1400, 18), (1400,), (1400,))"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train.shape, y_train.shape, cid_train.shape, x_test.shape, y_test.shape, cid_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "551588bb-c735-451b-8206-846e047d0de7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seniorcitizen</th>\n",
       "      <th>partner</th>\n",
       "      <th>dependents</th>\n",
       "      <th>paperlessbilling</th>\n",
       "      <th>monthlycharges</th>\n",
       "      <th>totalcharges</th>\n",
       "      <th>has_multiplelines</th>\n",
       "      <th>has_onlinesecurity</th>\n",
       "      <th>has_onlinebackup</th>\n",
       "      <th>has_techsupport</th>\n",
       "      <th>has_streamingtv</th>\n",
       "      <th>has_streamingmovies</th>\n",
       "      <th>has_monthlycontract</th>\n",
       "      <th>has_paymentmethod_electronic_check</th>\n",
       "      <th>tenure_old_customer</th>\n",
       "      <th>tenure_regular_customer</th>\n",
       "      <th>internetservice_DSL</th>\n",
       "      <th>internetservice_Fiber optic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6034</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.25</td>\n",
       "      <td>129.15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5604</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>70.80</td>\n",
       "      <td>1207.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4923</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>49.75</td>\n",
       "      <td>2535.55</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3334</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>106.30</td>\n",
       "      <td>4443.45</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4295</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>60.95</td>\n",
       "      <td>4119.40</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2715</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.25</td>\n",
       "      <td>996.45</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2204</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>111.30</td>\n",
       "      <td>7482.10</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6528</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.35</td>\n",
       "      <td>1458.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2693</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.30</td>\n",
       "      <td>1414.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3829</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>101.00</td>\n",
       "      <td>4388.40</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5643 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      seniorcitizen  partner  dependents  paperlessbilling  monthlycharges  \\\n",
       "6034            0.0      0.0         0.0               0.0           20.25   \n",
       "5604            0.0      0.0         0.0               1.0           70.80   \n",
       "4923            0.0      0.0         0.0               1.0           49.75   \n",
       "3334            0.0      0.0         0.0               1.0          106.30   \n",
       "4295            1.0      1.0         0.0               1.0           60.95   \n",
       "...             ...      ...         ...               ...             ...   \n",
       "2715            0.0      0.0         0.0               1.0           25.25   \n",
       "2204            0.0      1.0         1.0               1.0          111.30   \n",
       "6528            0.0      1.0         1.0               0.0           20.35   \n",
       "2693            0.0      0.0         0.0               0.0           19.30   \n",
       "3829            1.0      1.0         0.0               1.0          101.00   \n",
       "\n",
       "      totalcharges  has_multiplelines  has_onlinesecurity  has_onlinebackup  \\\n",
       "6034        129.15                0.0                 0.0               0.0   \n",
       "5604       1207.00                0.0                 0.0               0.0   \n",
       "4923       2535.55                0.0                 1.0               0.0   \n",
       "3334       4443.45                1.0                 0.0               1.0   \n",
       "4295       4119.40                0.0                 1.0               1.0   \n",
       "...            ...                ...                 ...               ...   \n",
       "2715        996.45                1.0                 0.0               0.0   \n",
       "2204       7482.10                1.0                 1.0               1.0   \n",
       "6528       1458.10                0.0                 0.0               0.0   \n",
       "2693       1414.80                0.0                 0.0               0.0   \n",
       "3829       4388.40                1.0                 0.0               1.0   \n",
       "\n",
       "      has_techsupport  has_streamingtv  has_streamingmovies  \\\n",
       "6034              0.0              0.0                  0.0   \n",
       "5604              0.0              0.0                  0.0   \n",
       "4923              0.0              0.0                  0.0   \n",
       "3334              0.0              1.0                  1.0   \n",
       "4295              1.0              0.0                  0.0   \n",
       "...               ...              ...                  ...   \n",
       "2715              0.0              0.0                  0.0   \n",
       "2204              0.0              1.0                  1.0   \n",
       "6528              0.0              0.0                  0.0   \n",
       "2693              0.0              0.0                  0.0   \n",
       "3829              0.0              1.0                  1.0   \n",
       "\n",
       "      has_monthlycontract  has_paymentmethod_electronic_check  \\\n",
       "6034                  0.0                                 0.0   \n",
       "5604                  1.0                                 0.0   \n",
       "4923                  1.0                                 0.0   \n",
       "3334                  1.0                                 0.0   \n",
       "4295                  0.0                                 0.0   \n",
       "...                   ...                                 ...   \n",
       "2715                  1.0                                 0.0   \n",
       "2204                  0.0                                 0.0   \n",
       "6528                  0.0                                 0.0   \n",
       "2693                  0.0                                 0.0   \n",
       "3829                  1.0                                 0.0   \n",
       "\n",
       "      tenure_old_customer  tenure_regular_customer  internetservice_DSL  \\\n",
       "6034                  0.0                      1.0                  0.0   \n",
       "5604                  0.0                      1.0                  0.0   \n",
       "4923                  0.0                      1.0                  1.0   \n",
       "3334                  0.0                      1.0                  0.0   \n",
       "4295                  1.0                      0.0                  1.0   \n",
       "...                   ...                      ...                  ...   \n",
       "2715                  0.0                      1.0                  0.0   \n",
       "2204                  1.0                      0.0                  0.0   \n",
       "6528                  1.0                      0.0                  0.0   \n",
       "2693                  1.0                      0.0                  0.0   \n",
       "3829                  0.0                      1.0                  0.0   \n",
       "\n",
       "      internetservice_Fiber optic  \n",
       "6034                          0.0  \n",
       "5604                          1.0  \n",
       "4923                          0.0  \n",
       "3334                          1.0  \n",
       "4295                          0.0  \n",
       "...                           ...  \n",
       "2715                          0.0  \n",
       "2204                          1.0  \n",
       "6528                          0.0  \n",
       "2693                          0.0  \n",
       "3829                          1.0  \n",
       "\n",
       "[5643 rows x 18 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6a01dced-7584-468b-8109-41455505cf25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6034    0.0\n",
       "5604    0.0\n",
       "4923    0.0\n",
       "3334    1.0\n",
       "4295    0.0\n",
       "       ... \n",
       "2715    0.0\n",
       "2204    1.0\n",
       "6528    0.0\n",
       "2693    0.0\n",
       "3829    1.0\n",
       "Name: churn, Length: 5643, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "f44d0a99-3f3f-4afb-b6ee-8e5766a02546",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6034    6035.0\n",
       "5604    5605.0\n",
       "4923    4924.0\n",
       "3334    3335.0\n",
       "4295    4296.0\n",
       "         ...  \n",
       "2715    2716.0\n",
       "2204    2205.0\n",
       "6528    6529.0\n",
       "2693    2694.0\n",
       "3829    3830.0\n",
       "Name: customerid, Length: 5643, dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cid_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d9042029-fd26-4f98-9102-cd9473a78577",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seniorcitizen</th>\n",
       "      <th>partner</th>\n",
       "      <th>dependents</th>\n",
       "      <th>paperlessbilling</th>\n",
       "      <th>monthlycharges</th>\n",
       "      <th>totalcharges</th>\n",
       "      <th>has_multiplelines</th>\n",
       "      <th>has_onlinesecurity</th>\n",
       "      <th>has_onlinebackup</th>\n",
       "      <th>has_techsupport</th>\n",
       "      <th>has_streamingtv</th>\n",
       "      <th>has_streamingmovies</th>\n",
       "      <th>has_monthlycontract</th>\n",
       "      <th>has_paymentmethod_electronic_check</th>\n",
       "      <th>tenure_old_customer</th>\n",
       "      <th>tenure_regular_customer</th>\n",
       "      <th>internetservice_DSL</th>\n",
       "      <th>internetservice_Fiber optic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5545</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86.55</td>\n",
       "      <td>1857.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.60</td>\n",
       "      <td>901.25</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2218</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>82.00</td>\n",
       "      <td>5999.85</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4392</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.20</td>\n",
       "      <td>19.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>95.90</td>\n",
       "      <td>2234.95</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.55</td>\n",
       "      <td>1357.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>822</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>103.10</td>\n",
       "      <td>4889.30</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1325</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>69.25</td>\n",
       "      <td>69.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3287</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>100.95</td>\n",
       "      <td>1875.55</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2841</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.10</td>\n",
       "      <td>79.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1400 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      seniorcitizen  partner  dependents  paperlessbilling  monthlycharges  \\\n",
       "5545            1.0      1.0         0.0               0.0           86.55   \n",
       "1657            0.0      0.0         0.0               1.0           25.60   \n",
       "2218            0.0      1.0         1.0               1.0           82.00   \n",
       "4392            0.0      1.0         1.0               0.0           19.20   \n",
       "1461            0.0      1.0         0.0               0.0           95.90   \n",
       "...             ...      ...         ...               ...             ...   \n",
       "612             0.0      0.0         1.0               0.0           20.55   \n",
       "822             0.0      0.0         0.0               1.0          103.10   \n",
       "1325            1.0      0.0         0.0               1.0           69.25   \n",
       "3287            0.0      1.0         1.0               1.0          100.95   \n",
       "2841            0.0      0.0         0.0               0.0           25.10   \n",
       "\n",
       "      totalcharges  has_multiplelines  has_onlinesecurity  has_onlinebackup  \\\n",
       "5545       1857.25                0.0                 0.0               0.0   \n",
       "1657        901.25                1.0                 0.0               0.0   \n",
       "2218       5999.85                0.0                 1.0               0.0   \n",
       "4392         19.20                0.0                 0.0               0.0   \n",
       "1461       2234.95                1.0                 1.0               0.0   \n",
       "...            ...                ...                 ...               ...   \n",
       "612        1357.10                0.0                 0.0               0.0   \n",
       "822        4889.30                1.0                 0.0               1.0   \n",
       "1325         69.25                0.0                 0.0               0.0   \n",
       "3287       1875.55                1.0                 0.0               0.0   \n",
       "2841         79.80                0.0                 0.0               0.0   \n",
       "\n",
       "      has_techsupport  has_streamingtv  has_streamingmovies  \\\n",
       "5545              0.0              1.0                  0.0   \n",
       "1657              0.0              0.0                  0.0   \n",
       "2218              1.0              1.0                  1.0   \n",
       "4392              0.0              0.0                  0.0   \n",
       "1461              1.0              1.0                  0.0   \n",
       "...               ...              ...                  ...   \n",
       "612               0.0              0.0                  0.0   \n",
       "822               0.0              1.0                  1.0   \n",
       "1325              0.0              0.0                  0.0   \n",
       "3287              1.0              1.0                  1.0   \n",
       "2841              0.0              0.0                  0.0   \n",
       "\n",
       "      has_monthlycontract  has_paymentmethod_electronic_check  \\\n",
       "5545                  1.0                                 0.0   \n",
       "1657                  1.0                                 0.0   \n",
       "2218                  0.0                                 0.0   \n",
       "4392                  1.0                                 0.0   \n",
       "1461                  1.0                                 0.0   \n",
       "...                   ...                                 ...   \n",
       "612                   0.0                                 0.0   \n",
       "822                   0.0                                 0.0   \n",
       "1325                  1.0                                 0.0   \n",
       "3287                  0.0                                 0.0   \n",
       "2841                  1.0                                 0.0   \n",
       "\n",
       "      tenure_old_customer  tenure_regular_customer  internetservice_DSL  \\\n",
       "5545                  0.0                      1.0                  0.0   \n",
       "1657                  0.0                      1.0                  0.0   \n",
       "2218                  1.0                      0.0                  1.0   \n",
       "4392                  0.0                      1.0                  0.0   \n",
       "1461                  0.0                      1.0                  0.0   \n",
       "...                   ...                      ...                  ...   \n",
       "612                   1.0                      0.0                  0.0   \n",
       "822                   0.0                      1.0                  0.0   \n",
       "1325                  0.0                      1.0                  0.0   \n",
       "3287                  0.0                      1.0                  0.0   \n",
       "2841                  0.0                      1.0                  1.0   \n",
       "\n",
       "      internetservice_Fiber optic  \n",
       "5545                          1.0  \n",
       "1657                          0.0  \n",
       "2218                          0.0  \n",
       "4392                          0.0  \n",
       "1461                          1.0  \n",
       "...                           ...  \n",
       "612                           0.0  \n",
       "822                           1.0  \n",
       "1325                          1.0  \n",
       "3287                          1.0  \n",
       "2841                          0.0  \n",
       "\n",
       "[1400 rows x 18 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "a2c9d71f-0303-485f-9843-3dbe55681c63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5545    0.0\n",
       "1657    0.0\n",
       "2218    0.0\n",
       "4392    0.0\n",
       "1461    0.0\n",
       "       ... \n",
       "612     0.0\n",
       "822     0.0\n",
       "1325    1.0\n",
       "3287    1.0\n",
       "2841    0.0\n",
       "Name: churn, Length: 1400, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6893a2d9-420a-434d-8327-e6dc102aa5e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5545    5546.0\n",
       "1657    1658.0\n",
       "2218    2219.0\n",
       "4392    4393.0\n",
       "1461    1462.0\n",
       "         ...  \n",
       "612      613.0\n",
       "822      823.0\n",
       "1325    1326.0\n",
       "3287    3288.0\n",
       "2841    2842.0\n",
       "Name: customerid, Length: 1400, dtype: float64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cid_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e075191c-6da3-4ffa-9111-478dd8074f28",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.tree import DecisionTreeClassifier # Importing the algorithm\n",
    "\n",
    "clf = DecisionTreeClassifier(max_depth=3)\n",
    "# define the algorithm:\n",
    "    # arg:\n",
    "        # max_depth = The maximum depth of the tree. (If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples)\n",
    "\n",
    "\n",
    "clf.fit(x_train, y_train) # running\\training the algorithm with the train data\n",
    "\n",
    "y_test_pred_DecisionTree = clf.predict(x_test) # making a prediction based on \"test\" data features\n",
    "\n",
    "\n",
    "output = pd.DataFrame({'customerid': cid_test, 'remained_customer':y_test, 'remained_customer_by_model': y_test_pred_DecisionTree}) # saving results to DataFrame\n",
    "output.to_csv('my_DecisionTree_Prediction.csv', index=False) # saving results to csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "b18220ca-6e54-4248-832d-4b5e7e4913f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerid</th>\n",
       "      <th>remained_customer</th>\n",
       "      <th>remained_customer_by_model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5545</th>\n",
       "      <td>5546.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657</th>\n",
       "      <td>1658.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2218</th>\n",
       "      <td>2219.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4392</th>\n",
       "      <td>4393.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>1462.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>613.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>822</th>\n",
       "      <td>823.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1325</th>\n",
       "      <td>1326.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3287</th>\n",
       "      <td>3288.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2841</th>\n",
       "      <td>2842.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1400 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerid  remained_customer  remained_customer_by_model\n",
       "5545      5546.0                0.0                         0.0\n",
       "1657      1658.0                0.0                         0.0\n",
       "2218      2219.0                0.0                         0.0\n",
       "4392      4393.0                0.0                         0.0\n",
       "1461      1462.0                0.0                         0.0\n",
       "...          ...                ...                         ...\n",
       "612        613.0                0.0                         0.0\n",
       "822        823.0                0.0                         0.0\n",
       "1325      1326.0                1.0                         1.0\n",
       "3287      3288.0                1.0                         0.0\n",
       "2841      2842.0                0.0                         0.0\n",
       "\n",
       "[1400 rows x 3 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "25ac9729-7e94-4e6f-bfe2-93cd48091ccf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1754pt\" height=\"433pt\" viewBox=\"0.00 0.00 1754.00 433.00\">\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 429)\">\n",
       "<title>Tree</title>\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-429 1750,-429 1750,4 -4,4\"/>\n",
       "<!-- 0 -->\n",
       "<g id=\"node1\" class=\"node\">\n",
       "<title>0</title>\n",
       "<polygon fill=\"#eeae80\" stroke=\"black\" points=\"994,-425 787,-425 787,-342 994,-342 994,-425\"/>\n",
       "<text text-anchor=\"middle\" x=\"890.5\" y=\"-409.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">has_monthlycontract &lt;= 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"890.5\" y=\"-394.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.388</text>\n",
       "<text text-anchor=\"middle\" x=\"890.5\" y=\"-379.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 5643</text>\n",
       "<text text-anchor=\"middle\" x=\"890.5\" y=\"-364.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [4158, 1485]</text>\n",
       "<text text-anchor=\"middle\" x=\"890.5\" y=\"-349.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 1 -->\n",
       "<g id=\"node2\" class=\"node\">\n",
       "<title>1</title>\n",
       "<polygon fill=\"#e78a47\" stroke=\"black\" points=\"769,-306 562,-306 562,-223 769,-223 769,-306\"/>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-290.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">monthlycharges &lt;= 93.75</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-275.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.12</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-260.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 2533</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-245.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [2371, 162]</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-230.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;1 -->\n",
       "<g id=\"edge1\" class=\"edge\">\n",
       "<title>0-&gt;1</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M812.44,-341.91C793.07,-331.83 772.19,-320.98 752.42,-310.7\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"753.91,-307.53 743.42,-306.02 750.68,-313.74 753.91,-307.53\"/>\n",
       "<text text-anchor=\"middle\" x=\"750.95\" y=\"-326.16\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">True</text>\n",
       "</g>\n",
       "<!-- 8 -->\n",
       "<g id=\"node9\" class=\"node\">\n",
       "<title>8</title>\n",
       "<polygon fill=\"#f8decc\" stroke=\"black\" points=\"1219,-306 1012,-306 1012,-223 1219,-223 1219,-306\"/>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-290.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">internetservice_Fiber optic &lt;= 0.5</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-275.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.489</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-260.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 3110</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-245.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1787, 1323]</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-230.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 0&#45;&gt;8 -->\n",
       "<g id=\"edge8\" class=\"edge\">\n",
       "<title>0-&gt;8</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M968.56,-341.91C987.93,-331.83 1008.81,-320.98 1028.58,-310.7\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1030.32,-313.74 1037.58,-306.02 1027.09,-307.53 1030.32,-313.74\"/>\n",
       "<text text-anchor=\"middle\" x=\"1030.05\" y=\"-326.16\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">False</text>\n",
       "</g>\n",
       "<!-- 2 -->\n",
       "<g id=\"node3\" class=\"node\">\n",
       "<title>2</title>\n",
       "<polygon fill=\"#e68641\" stroke=\"black\" points=\"432,-187 225,-187 225,-104 432,-104 432,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-171.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">monthlycharges &lt;= 41.35</text>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-156.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.072</text>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1925</text>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1853, 72]</text>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;2 -->\n",
       "<g id=\"edge2\" class=\"edge\">\n",
       "<title>1-&gt;2</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M561.64,-227.44C523.66,-214.26 480.53,-199.28 441.77,-185.83\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"442.61,-182.41 432.02,-182.44 440.32,-189.03 442.61,-182.41\"/>\n",
       "</g>\n",
       "<!-- 5 -->\n",
       "<g id=\"node6\" class=\"node\">\n",
       "<title>5</title>\n",
       "<polygon fill=\"#ea975b\" stroke=\"black\" points=\"769,-187 562,-187 562,-104 769,-104 769,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-171.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">totalcharges &lt;= 6584.375</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-156.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.252</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 608</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [518, 90]</text>\n",
       "<text text-anchor=\"middle\" x=\"665.5\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 1&#45;&gt;5 -->\n",
       "<g id=\"edge5\" class=\"edge\">\n",
       "<title>1-&gt;5</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M665.5,-222.91C665.5,-214.65 665.5,-205.86 665.5,-197.3\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"669,-197.02 665.5,-187.02 662,-197.02 669,-197.02\"/>\n",
       "</g>\n",
       "<!-- 3 -->\n",
       "<g id=\"node4\" class=\"node\">\n",
       "<title>3</title>\n",
       "<polygon fill=\"#e5833b\" stroke=\"black\" points=\"207,-68 0,-68 0,0 207,0 207,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"103.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.025</text>\n",
       "<text text-anchor=\"middle\" x=\"103.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 886</text>\n",
       "<text text-anchor=\"middle\" x=\"103.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [875, 11]</text>\n",
       "<text text-anchor=\"middle\" x=\"103.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;3 -->\n",
       "<g id=\"edge3\" class=\"edge\">\n",
       "<title>2-&gt;3</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M245.04,-103.88C223.9,-93.6 201.3,-82.6 180.5,-72.47\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"181.92,-69.27 171.4,-68.04 178.86,-75.57 181.92,-69.27\"/>\n",
       "</g>\n",
       "<!-- 4 -->\n",
       "<g id=\"node5\" class=\"node\">\n",
       "<title>4</title>\n",
       "<polygon fill=\"#e78945\" stroke=\"black\" points=\"432,-68 225,-68 225,0 432,0 432,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.111</text>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1039</text>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [978, 61]</text>\n",
       "<text text-anchor=\"middle\" x=\"328.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 2&#45;&gt;4 -->\n",
       "<g id=\"edge4\" class=\"edge\">\n",
       "<title>2-&gt;4</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M328.5,-103.73C328.5,-95.52 328.5,-86.86 328.5,-78.56\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"332,-78.3 328.5,-68.3 325,-78.3 332,-78.3\"/>\n",
       "</g>\n",
       "<!-- 6 -->\n",
       "<g id=\"node7\" class=\"node\">\n",
       "<title>6</title>\n",
       "<polygon fill=\"#eca36f\" stroke=\"black\" points=\"657,-68 450,-68 450,0 657,0 657,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"553.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.335</text>\n",
       "<text text-anchor=\"middle\" x=\"553.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 291</text>\n",
       "<text text-anchor=\"middle\" x=\"553.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [229, 62]</text>\n",
       "<text text-anchor=\"middle\" x=\"553.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;6 -->\n",
       "<g id=\"edge6\" class=\"edge\">\n",
       "<title>5-&gt;6</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M623.8,-103.73C614.37,-94.51 604.37,-84.74 594.96,-75.53\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"597.16,-72.79 587.56,-68.3 592.26,-77.79 597.16,-72.79\"/>\n",
       "</g>\n",
       "<!-- 7 -->\n",
       "<g id=\"node8\" class=\"node\">\n",
       "<title>7</title>\n",
       "<polygon fill=\"#e88d4c\" stroke=\"black\" points=\"882,-68 675,-68 675,0 882,0 882,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"778.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.161</text>\n",
       "<text text-anchor=\"middle\" x=\"778.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 317</text>\n",
       "<text text-anchor=\"middle\" x=\"778.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [289, 28]</text>\n",
       "<text text-anchor=\"middle\" x=\"778.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 5&#45;&gt;7 -->\n",
       "<g id=\"edge7\" class=\"edge\">\n",
       "<title>5-&gt;7</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M707.58,-103.73C717.18,-94.42 727.37,-84.54 736.95,-75.26\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"739.39,-77.77 744.14,-68.3 734.52,-72.75 739.39,-77.77\"/>\n",
       "</g>\n",
       "<!-- 9 -->\n",
       "<g id=\"node10\" class=\"node\">\n",
       "<title>9</title>\n",
       "<polygon fill=\"#efb286\" stroke=\"black\" points=\"1219,-187 1012,-187 1012,-104 1219,-104 1219,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-171.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">totalcharges &lt;= 310.9</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-156.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.404</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1398</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [1005, 393]</text>\n",
       "<text text-anchor=\"middle\" x=\"1115.5\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;9 -->\n",
       "<g id=\"edge9\" class=\"edge\">\n",
       "<title>8-&gt;9</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1115.5,-222.91C1115.5,-214.65 1115.5,-205.86 1115.5,-197.3\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1119,-197.02 1115.5,-187.02 1112,-197.02 1119,-197.02\"/>\n",
       "</g>\n",
       "<!-- 12 -->\n",
       "<g id=\"node13\" class=\"node\">\n",
       "<title>12</title>\n",
       "<polygon fill=\"#dfeffb\" stroke=\"black\" points=\"1520.5,-187 1350.5,-187 1350.5,-104 1520.5,-104 1520.5,-187\"/>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-171.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">totalcharges &lt;= 1557.175</text>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-156.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.496</text>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-141.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 1712</text>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-126.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [782, 930]</text>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-111.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = remained_customer</text>\n",
       "</g>\n",
       "<!-- 8&#45;&gt;12 -->\n",
       "<g id=\"edge12\" class=\"edge\">\n",
       "<title>8-&gt;12</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1219.39,-225.51C1258.43,-211.24 1302.56,-195.11 1340.72,-181.15\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1342.09,-184.38 1350.28,-177.66 1339.69,-177.8 1342.09,-184.38\"/>\n",
       "</g>\n",
       "<!-- 10 -->\n",
       "<g id=\"node11\" class=\"node\">\n",
       "<title>10</title>\n",
       "<polygon fill=\"#f5cdb0\" stroke=\"black\" points=\"1107,-68 900,-68 900,0 1107,0 1107,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"1003.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.469</text>\n",
       "<text text-anchor=\"middle\" x=\"1003.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 723</text>\n",
       "<text text-anchor=\"middle\" x=\"1003.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [452, 271]</text>\n",
       "<text text-anchor=\"middle\" x=\"1003.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;10 -->\n",
       "<g id=\"edge10\" class=\"edge\">\n",
       "<title>9-&gt;10</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1073.8,-103.73C1064.37,-94.51 1054.37,-84.74 1044.96,-75.53\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1047.16,-72.79 1037.56,-68.3 1042.26,-77.79 1047.16,-72.79\"/>\n",
       "</g>\n",
       "<!-- 11 -->\n",
       "<g id=\"node12\" class=\"node\">\n",
       "<title>11</title>\n",
       "<polygon fill=\"#eb9d65\" stroke=\"black\" points=\"1332,-68 1125,-68 1125,0 1332,0 1332,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"1228.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.296</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 675</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [553, 122]</text>\n",
       "<text text-anchor=\"middle\" x=\"1228.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 9&#45;&gt;11 -->\n",
       "<g id=\"edge11\" class=\"edge\">\n",
       "<title>9-&gt;11</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1157.58,-103.73C1167.18,-94.42 1177.37,-84.54 1186.95,-75.26\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1189.39,-77.77 1194.14,-68.3 1184.52,-72.75 1189.39,-77.77\"/>\n",
       "</g>\n",
       "<!-- 13 -->\n",
       "<g id=\"node14\" class=\"node\">\n",
       "<title>13</title>\n",
       "<polygon fill=\"#98ccf1\" stroke=\"black\" points=\"1520.5,-68 1350.5,-68 1350.5,0 1520.5,0 1520.5,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.438</text>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 914</text>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [296, 618]</text>\n",
       "<text text-anchor=\"middle\" x=\"1435.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = remained_customer</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;13 -->\n",
       "<g id=\"edge13\" class=\"edge\">\n",
       "<title>12-&gt;13</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1435.5,-103.73C1435.5,-95.52 1435.5,-86.86 1435.5,-78.56\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1439,-78.3 1435.5,-68.3 1432,-78.3 1439,-78.3\"/>\n",
       "</g>\n",
       "<!-- 14 -->\n",
       "<g id=\"node15\" class=\"node\">\n",
       "<title>14</title>\n",
       "<polygon fill=\"#f6d2b8\" stroke=\"black\" points=\"1746,-68 1539,-68 1539,0 1746,0 1746,-68\"/>\n",
       "<text text-anchor=\"middle\" x=\"1642.5\" y=\"-52.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">gini = 0.476</text>\n",
       "<text text-anchor=\"middle\" x=\"1642.5\" y=\"-37.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">samples = 798</text>\n",
       "<text text-anchor=\"middle\" x=\"1642.5\" y=\"-22.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">value = [486, 312]</text>\n",
       "<text text-anchor=\"middle\" x=\"1642.5\" y=\"-7.8\" font-family=\"Times New Roman,serif\" font-size=\"14.00\">class = did_not_remain_customer</text>\n",
       "</g>\n",
       "<!-- 12&#45;&gt;14 -->\n",
       "<g id=\"edge14\" class=\"edge\">\n",
       "<title>12-&gt;14</title>\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M1512.28,-103.88C1531.55,-93.69 1552.15,-82.79 1571.14,-72.75\"/>\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"1572.83,-75.81 1580.03,-68.04 1569.56,-69.63 1572.83,-75.81\"/>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the decision tree\n",
    "# Importing the necessary libraries\n",
    "#from sklearn.tree import DecisionTreeClassifier, export_graphviz\n",
    "#from IPython.display import SVG\n",
    "#from graphviz import Source\n",
    "#from IPython.display import display\n",
    "\n",
    "# this is afunction that we can always use for plotting decision trees, the function expects 3 arg as follows\n",
    "def plot_tree(tree, features, labels):\n",
    "    graph = Source(export_graphviz(tree, feature_names=features, class_names=labels, filled = True))\n",
    "    display(SVG(graph.pipe(format='svg')))\n",
    "\n",
    "# Using the function above, with the 3 arg\n",
    "    # tree\n",
    "    # feaures\n",
    "    # labels --> we'll go over the example and it will be clear\n",
    "plot_tree(clf, x_train.columns, ['did_not_remain_customer', 'remained_customer'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0430cd8d-5e67-4c48-a6d4-42bc9c2875ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.ensemble import RandomForestClassifier # Importing the algorithm\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=15)\n",
    "# define the algorithm:\n",
    "    # arg:\n",
    "        # n_estimators = number of trees\n",
    "        # max_dept = the maximum depth of the trees\n",
    "        # random_state =\n",
    "            # basically, an algorithm is repeated a number of times using random selections of features and samples. The random_state parameter allows controlling these random choices.\n",
    "            # if you call this with random_state=1 (or any other value), then each and every time, you'll get the same result.\n",
    "            \n",
    "model.fit(x_train, y_train) # running\\training the algorithm with the train data\n",
    "\n",
    "y_test_pred_RandomForest = model.predict(x_test) # making a prediction based on \"test\" data features\n",
    "\n",
    "\n",
    "output = pd.DataFrame({'customerid': cid_test, 'remained_customer':y_test, 'remained_customer_by_model': y_test_pred_RandomForest}) # saving results to DataFrame\n",
    "output.to_csv('my_RandomForest_Prediction.csv', index=False) # saving results to csv\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "734a1c17-3f28-408b-a445-377f37207b94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerid</th>\n",
       "      <th>remained_customer</th>\n",
       "      <th>remained_customer_by_model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5545</th>\n",
       "      <td>5546.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657</th>\n",
       "      <td>1658.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2218</th>\n",
       "      <td>2219.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4392</th>\n",
       "      <td>4393.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>1462.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>613.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>822</th>\n",
       "      <td>823.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1325</th>\n",
       "      <td>1326.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3287</th>\n",
       "      <td>3288.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2841</th>\n",
       "      <td>2842.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1400 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerid  remained_customer  remained_customer_by_model\n",
       "5545      5546.0                0.0                         0.0\n",
       "1657      1658.0                0.0                         0.0\n",
       "2218      2219.0                0.0                         0.0\n",
       "4392      4393.0                0.0                         0.0\n",
       "1461      1462.0                0.0                         0.0\n",
       "...          ...                ...                         ...\n",
       "612        613.0                0.0                         0.0\n",
       "822        823.0                0.0                         0.0\n",
       "1325      1326.0                1.0                         1.0\n",
       "3287      3288.0                1.0                         0.0\n",
       "2841      2842.0                0.0                         0.0\n",
       "\n",
       "[1400 rows x 3 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "2cd0b688-1ee6-485a-90b7-c295b4d5b9aa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.00972224, 0.00889099, 0.01124093, 0.03271174, 0.10141006,\n",
       "       0.10549209, 0.00214717, 0.0179036 , 0.00251408, 0.01968583,\n",
       "       0.00508749, 0.00257868, 0.35063728, 0.        , 0.06987501,\n",
       "       0.07169659, 0.01562215, 0.17278406])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_importances = model.feature_importances_ # applying the method \"feature_importances_\" on the algorithm\n",
    "feature_importances # Every feature importance (%)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1558ebe5-0dd7-481e-907d-632c6956545a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>has_monthlycontract</td>\n",
       "      <td>0.350637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>internetservice_Fiber optic</td>\n",
       "      <td>0.172784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>totalcharges</td>\n",
       "      <td>0.105492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>monthlycharges</td>\n",
       "      <td>0.101410</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>tenure_regular_customer</td>\n",
       "      <td>0.071697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>tenure_old_customer</td>\n",
       "      <td>0.069875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>paperlessbilling</td>\n",
       "      <td>0.032712</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>has_techsupport</td>\n",
       "      <td>0.019686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>has_onlinesecurity</td>\n",
       "      <td>0.017904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>internetservice_DSL</td>\n",
       "      <td>0.015622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>dependents</td>\n",
       "      <td>0.011241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>seniorcitizen</td>\n",
       "      <td>0.009722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>partner</td>\n",
       "      <td>0.008891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>has_streamingtv</td>\n",
       "      <td>0.005087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>has_streamingmovies</td>\n",
       "      <td>0.002579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>has_onlinebackup</td>\n",
       "      <td>0.002514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>has_multiplelines</td>\n",
       "      <td>0.002147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>has_paymentmethod_electronic_check</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               feature  importance\n",
       "12                 has_monthlycontract    0.350637\n",
       "17         internetservice_Fiber optic    0.172784\n",
       "5                         totalcharges    0.105492\n",
       "4                       monthlycharges    0.101410\n",
       "15             tenure_regular_customer    0.071697\n",
       "14                 tenure_old_customer    0.069875\n",
       "3                     paperlessbilling    0.032712\n",
       "9                      has_techsupport    0.019686\n",
       "7                   has_onlinesecurity    0.017904\n",
       "16                 internetservice_DSL    0.015622\n",
       "2                           dependents    0.011241\n",
       "0                        seniorcitizen    0.009722\n",
       "1                              partner    0.008891\n",
       "10                     has_streamingtv    0.005087\n",
       "11                 has_streamingmovies    0.002579\n",
       "8                     has_onlinebackup    0.002514\n",
       "6                    has_multiplelines    0.002147\n",
       "13  has_paymentmethod_electronic_check    0.000000"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features = x_train.columns # all the features\n",
    "stats = pd.DataFrame({'feature':features, 'importance':feature_importances}) # creating the data frame\n",
    "stats.sort_values('importance', ascending=False) # Sorting the data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "55aa70ce-058d-4927-962e-f1f9f9ede763",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stats_sort = stats.sort_values('importance', ascending=True)\n",
    "stats_sort.plot(y='importance', x='feature', kind='barh')\n",
    "plt.title('Feature Importance of Random Forest');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3c970471-0de1-4a78-b114-4be480401cd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.neighbors import KNeighborsClassifier  # Importing the algorithm\n",
    "\n",
    "clf = KNeighborsClassifier(n_neighbors=3)\n",
    "# define the algorithm:\n",
    "    # arg:\n",
    "        # n_neighbors = number of neighbors\n",
    "        \n",
    "clf.fit(x_train, y_train) # running\\training the algorithm with the train data\n",
    "\n",
    "y_test_pred_Knn = clf.predict(x_test) # making a prediction based on \"test\" data features\n",
    "\n",
    "output = pd.DataFrame({'customerid': cid_test, 'remained_customer':y_test, 'remained_customer_by_model': y_test_pred_Knn}) # saving results to DataFrame\n",
    "output.to_csv('my_Knn_Prediction.csv', index=False) # saving results to csv\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "d1599960-8d55-415f-991f-1b2279a8758b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerid</th>\n",
       "      <th>remained_customer</th>\n",
       "      <th>remained_customer_by_model</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5545</th>\n",
       "      <td>5546.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657</th>\n",
       "      <td>1658.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2218</th>\n",
       "      <td>2219.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4392</th>\n",
       "      <td>4393.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>1462.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>613.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>822</th>\n",
       "      <td>823.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1325</th>\n",
       "      <td>1326.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3287</th>\n",
       "      <td>3288.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2841</th>\n",
       "      <td>2842.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1400 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerid  remained_customer  remained_customer_by_model\n",
       "5545      5546.0                0.0                         1.0\n",
       "1657      1658.0                0.0                         0.0\n",
       "2218      2219.0                0.0                         0.0\n",
       "4392      4393.0                0.0                         0.0\n",
       "1461      1462.0                0.0                         1.0\n",
       "...          ...                ...                         ...\n",
       "612        613.0                0.0                         0.0\n",
       "822        823.0                0.0                         0.0\n",
       "1325      1326.0                1.0                         1.0\n",
       "3287      3288.0                1.0                         0.0\n",
       "2841      2842.0                0.0                         1.0\n",
       "\n",
       "[1400 rows x 3 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e9849b99-8576-4097-ad51-6f502526afa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.metrics import accuracy_score # importing \"accuracy_score\" from \"sklearn.metrics\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3dd62f42-65c2-410c-9184-7f0b862b755e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluation for Decision Tree\n",
    "test_acc = accuracy_score(y_test, y_test_pred_DecisionTree)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ad7a4fcb-9688-4582-89a7-c9295921e7ac",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7735714285714286"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluation for Random Forest\n",
    "test_acc = accuracy_score(y_test, y_test_pred_RandomForest)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "43743582-8ea2-460d-a731-4d3df00cd6ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7435714285714285"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluation for Knn\n",
    "test_acc = accuracy_score(y_test, y_test_pred_Knn)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c466ea4-f7d4-4cf7-b30b-6bce00f7545f",
   "metadata": {},
   "source": [
    "### Testing with Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "78fecefe-1735-4855-b6a0-62829f8ec0a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Tree -- max_depth = 3 (like before)\n",
    "\n",
    "clf = DecisionTreeClassifier(max_depth=3, random_state=15)\n",
    "clf.fit(x_train, y_train)\n",
    "y_test_pred_DecisionTree = clf.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_DecisionTree)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "a87c16f0-31ae-48e0-999f-4912ed092ba2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.78"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Tree -- max_depth = 4\n",
    "\n",
    "clf = DecisionTreeClassifier(max_depth=4, random_state=15)\n",
    "clf.fit(x_train, y_train)\n",
    "y_test_pred_DecisionTree = clf.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_DecisionTree)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d0b857d1-2724-4c56-8316-3824472e29d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7728571428571429"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Decision Tree -- max_depth = 10\n",
    "\n",
    "clf = DecisionTreeClassifier(max_depth=10, random_state=15)\n",
    "clf.fit(x_train, y_train)\n",
    "y_test_pred_DecisionTree = clf.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_DecisionTree)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "054549d7-881e-42d1-8a1a-717ce517f4a0",
   "metadata": {},
   "source": [
    "### Testing with Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e3f117ec-1e41-41f4-aa0a-70f1219b90de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7735714285714286"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Random Forest -- n_estimators = 100 & max_depth = 3 (like before)\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=15)        \n",
    "model.fit(x_train, y_train)\n",
    "y_test_pred_RandomForest = model.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_RandomForest)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "d2354fb7-6609-4f97-a30c-33c29b5b02cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7914285714285715"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Random Forest -- n_estimators = 100 & max_depth = 6\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=100, max_depth=6, random_state=15)        \n",
    "model.fit(x_train, y_train)\n",
    "y_test_pred_RandomForest = model.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_RandomForest)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "2eac6a05-d577-4e67-a162-3b7ae12568c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8042857142857143"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Random Forest -- n_estimators = 100 & max_depth = 9\n",
    "\n",
    "model = RandomForestClassifier(n_estimators=100, max_depth=9, random_state=15)        \n",
    "model.fit(x_train, y_train)\n",
    "y_test_pred_RandomForest = model.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_RandomForest)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45ad1479-305d-4eb0-b788-2ddd54628336",
   "metadata": {},
   "source": [
    "### Testing with KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "abe204b4-8043-4fa1-8c7a-014129e90995",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7435714285714285"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Knn -- n_neighbors = 3 (like before)\n",
    "\n",
    "clf = KNeighborsClassifier(n_neighbors=3)\n",
    "clf.fit(x_train, y_train)\n",
    "y_test_pred_Knn = clf.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_Knn)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "24639cb9-96f9-48dd-8314-ac7abfc58574",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7778571428571428"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Knn -- n_neighbors = 8\n",
    "\n",
    "clf = KNeighborsClassifier(n_neighbors=8)\n",
    "clf.fit(x_train, y_train)\n",
    "y_test_pred_Knn = clf.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_Knn)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "f4af6b63-4b07-4c23-bae7-dcf57303d703",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7842857142857143"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Knn -- n_neighbors = 12\n",
    "\n",
    "clf = KNeighborsClassifier(n_neighbors=12)\n",
    "clf.fit(x_train, y_train)\n",
    "y_test_pred_Knn = clf.predict(x_test)\n",
    "test_acc = accuracy_score(y_test, y_test_pred_Knn)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "aa81eb29-097a-401d-a98d-1809efbeebbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Seems like the algorithm overfits a bit, also we know that KNN can highly\n",
    "## suffer from features that are in different scales. So let's scale the x \n",
    "## values first"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "af88e6ff-2675-4e29-9b5e-c3b8243669b9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7778571428571428"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import StandardScaler # import the libraries\n",
    "\n",
    "scaler = StandardScaler() # define\n",
    "\n",
    "x_train_scaled = scaler.fit_transform(x_train) # Fit to data, then transform it.\n",
    "x_test_scaled = scaler.transform(x_test) # Perform standardization by centering and scaling\n",
    "\n",
    "clf = KNeighborsClassifier(n_neighbors=7)\n",
    "clf.fit(x_train_scaled, y_train)\n",
    "\n",
    "y_test_pred_Knn_Scaled = clf.predict(x_test_scaled)\n",
    "\n",
    "\n",
    "output = pd.DataFrame({'customerid': cid_test, 'remained_customer':y_test, 'remained_customer_by_model': y_test_pred_Knn, 'remained_customer_predicted_by_model_scaled':y_test_pred_Knn_Scaled}) # saving results to DataFrame\n",
    "output.to_csv('my_Knn_Prediction_scaled.csv', index=False) # saving results to csv\n",
    "\n",
    "\n",
    "test_acc = accuracy_score(y_test, y_test_pred_Knn_Scaled)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "1a1db3ff-0c65-47d8-b2f8-d7225f6d8067",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    4158\n",
       "1.0    1485\n",
       "Name: churn, dtype: int64"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "86527a80-66f2-49b7-81fd-81065d314986",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>seniorcitizen</th>\n",
       "      <th>partner</th>\n",
       "      <th>dependents</th>\n",
       "      <th>paperlessbilling</th>\n",
       "      <th>monthlycharges</th>\n",
       "      <th>totalcharges</th>\n",
       "      <th>has_multiplelines</th>\n",
       "      <th>has_onlinesecurity</th>\n",
       "      <th>has_onlinebackup</th>\n",
       "      <th>has_techsupport</th>\n",
       "      <th>has_streamingtv</th>\n",
       "      <th>has_streamingmovies</th>\n",
       "      <th>has_monthlycontract</th>\n",
       "      <th>has_paymentmethod_electronic_check</th>\n",
       "      <th>tenure_old_customer</th>\n",
       "      <th>tenure_regular_customer</th>\n",
       "      <th>internetservice_DSL</th>\n",
       "      <th>internetservice_Fiber optic</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5545</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>86.55</td>\n",
       "      <td>1857.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1657</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>25.60</td>\n",
       "      <td>901.25</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2218</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>82.00</td>\n",
       "      <td>5999.85</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4392</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19.20</td>\n",
       "      <td>19.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1461</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>95.90</td>\n",
       "      <td>2234.95</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>612</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>20.55</td>\n",
       "      <td>1357.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>822</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>103.10</td>\n",
       "      <td>4889.30</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1325</th>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>69.25</td>\n",
       "      <td>69.25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3287</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>100.95</td>\n",
       "      <td>1875.55</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2841</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>25.10</td>\n",
       "      <td>79.80</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1400 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      seniorcitizen  partner  dependents  paperlessbilling  monthlycharges  \\\n",
       "5545            1.0      1.0         0.0               0.0           86.55   \n",
       "1657            0.0      0.0         0.0               1.0           25.60   \n",
       "2218            0.0      1.0         1.0               1.0           82.00   \n",
       "4392            0.0      1.0         1.0               0.0           19.20   \n",
       "1461            0.0      1.0         0.0               0.0           95.90   \n",
       "...             ...      ...         ...               ...             ...   \n",
       "612             0.0      0.0         1.0               0.0           20.55   \n",
       "822             0.0      0.0         0.0               1.0          103.10   \n",
       "1325            1.0      0.0         0.0               1.0           69.25   \n",
       "3287            0.0      1.0         1.0               1.0          100.95   \n",
       "2841            0.0      0.0         0.0               0.0           25.10   \n",
       "\n",
       "      totalcharges  has_multiplelines  has_onlinesecurity  has_onlinebackup  \\\n",
       "5545       1857.25                0.0                 0.0               0.0   \n",
       "1657        901.25                1.0                 0.0               0.0   \n",
       "2218       5999.85                0.0                 1.0               0.0   \n",
       "4392         19.20                0.0                 0.0               0.0   \n",
       "1461       2234.95                1.0                 1.0               0.0   \n",
       "...            ...                ...                 ...               ...   \n",
       "612        1357.10                0.0                 0.0               0.0   \n",
       "822        4889.30                1.0                 0.0               1.0   \n",
       "1325         69.25                0.0                 0.0               0.0   \n",
       "3287       1875.55                1.0                 0.0               0.0   \n",
       "2841         79.80                0.0                 0.0               0.0   \n",
       "\n",
       "      has_techsupport  has_streamingtv  has_streamingmovies  \\\n",
       "5545              0.0              1.0                  0.0   \n",
       "1657              0.0              0.0                  0.0   \n",
       "2218              1.0              1.0                  1.0   \n",
       "4392              0.0              0.0                  0.0   \n",
       "1461              1.0              1.0                  0.0   \n",
       "...               ...              ...                  ...   \n",
       "612               0.0              0.0                  0.0   \n",
       "822               0.0              1.0                  1.0   \n",
       "1325              0.0              0.0                  0.0   \n",
       "3287              1.0              1.0                  1.0   \n",
       "2841              0.0              0.0                  0.0   \n",
       "\n",
       "      has_monthlycontract  has_paymentmethod_electronic_check  \\\n",
       "5545                  1.0                                 0.0   \n",
       "1657                  1.0                                 0.0   \n",
       "2218                  0.0                                 0.0   \n",
       "4392                  1.0                                 0.0   \n",
       "1461                  1.0                                 0.0   \n",
       "...                   ...                                 ...   \n",
       "612                   0.0                                 0.0   \n",
       "822                   0.0                                 0.0   \n",
       "1325                  1.0                                 0.0   \n",
       "3287                  0.0                                 0.0   \n",
       "2841                  1.0                                 0.0   \n",
       "\n",
       "      tenure_old_customer  tenure_regular_customer  internetservice_DSL  \\\n",
       "5545                  0.0                      1.0                  0.0   \n",
       "1657                  0.0                      1.0                  0.0   \n",
       "2218                  1.0                      0.0                  1.0   \n",
       "4392                  0.0                      1.0                  0.0   \n",
       "1461                  0.0                      1.0                  0.0   \n",
       "...                   ...                      ...                  ...   \n",
       "612                   1.0                      0.0                  0.0   \n",
       "822                   0.0                      1.0                  0.0   \n",
       "1325                  0.0                      1.0                  0.0   \n",
       "3287                  0.0                      1.0                  0.0   \n",
       "2841                  0.0                      1.0                  1.0   \n",
       "\n",
       "      internetservice_Fiber optic  \n",
       "5545                          1.0  \n",
       "1657                          0.0  \n",
       "2218                          0.0  \n",
       "4392                          0.0  \n",
       "1461                          1.0  \n",
       "...                           ...  \n",
       "612                           0.0  \n",
       "822                           1.0  \n",
       "1325                          1.0  \n",
       "3287                          1.0  \n",
       "2841                          0.0  \n",
       "\n",
       "[1400 rows x 18 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e49a60a0-ddc4-49d6-b415-82b9f4f77f92",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0., 0., 0., ..., 0., 0., 0.])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "def get_benchmark_predictions(x, benchmark_value): # The function returns a numpy array on the same length as x with all values equal to benchmark_value\n",
    "    return np.ones(len(x))*benchmark_value\n",
    "    \n",
    "\n",
    "benchmark_value = 0\n",
    "\n",
    "y_test_pred_Benchmark = get_benchmark_predictions(x_test, benchmark_value)\n",
    "y_test_pred_Benchmark\n",
    "# Basicly, our benchmark predicts, always 0 (zero) --> Did not remain a customer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "68e19bb3-4da6-4727-9174-7d1bac94a4fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7257142857142858"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_acc = accuracy_score(y_test, y_test_pred_Benchmark)\n",
    "test_acc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f65804c2-5b0f-493c-8265-7cacae3fbe4e",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Our model results:\n",
    "##### Decision tree best accuracy Result: 78%<br>\n",
    "##### Random Forest best accuracy Result: 80.43%<br>\n",
    "##### Knn best accuracy Result (before standardization): 78.43%<br>\n",
    "##### Knn best accuracy Result (after standardization): 77.78%<br>\n",
    "### The performance on the baseline test is 72.57%, we can see, that any of our algorithms beats the benchmark performance."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
